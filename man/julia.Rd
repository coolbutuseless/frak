% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/julia.R
\name{julia}
\alias{julia}
\title{Generate a julia set}
\usage{
julia(
  c_re = -0.7,
  c_im = 0.27015,
  x = 0,
  y = 0,
  zoom = 1,
  width = 400,
  height = 400,
  max_iter = 255,
  result = "int",
  colors = NULL
)
}
\arguments{
\item{c_re, c_im}{real and imaginary components of 'c'. Default [-0.7, 0.27015]}

\item{x, y}{offsets in centre position Default [0, 0]}

\item{zoom}{zoom level. default 1.}

\item{width, height}{size of the image}

\item{max_iter}{maximum number of iterations. Default: 256}

\item{result}{'int', 'dbl', 'nativeraster', 'raster' OR an array of the
right type which will be filled with the result.  If an array 
is provided its dimensions will override the \code{size}
argument.}

\item{colors}{if type is 'raster' or 'nativeraster', then this is the
colour palette to use. If not provided, a default
palette will be used.}
}
\value{
raw vector with dimensions (size, size)
}
\description{
This function generates Julia fractals as an array of raw values.  The
values represent the number of iterations performed before the values at
the pixel location iterated towards infinity.  It is not a raw count of iterations,
but rather the count of iterations scaled to be a maximum of 255 - and thus
the data fits in a \code{raw} vector.
}
\examples{
im <- julia(result = 'int')
plot(as.raster(im/max(im)))
}
